<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-10-30T08:19:09.290Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>浅谈技术负债</title>
    <link href="http://example.com/2023/10/30/%E6%B5%85%E8%B0%88%E6%8A%80%E6%9C%AF%E8%B4%9F%E5%80%BA/"/>
    <id>http://example.com/2023/10/30/%E6%B5%85%E8%B0%88%E6%8A%80%E6%9C%AF%E8%B4%9F%E5%80%BA/</id>
    <published>2023-10-29T16:00:00.000Z</published>
    <updated>2023-10-30T08:19:09.290Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/../imgs/technicalTebt_4.jpeg" alt="technicalTebt_4"></p><h3 id="何为技术债务"><a href="#何为技术债务" class="headerlink" title="何为技术债务"></a>何为技术债务</h3><p>技术债务：是指在软件开发过程中，为了快速交付产品或功能而采取的技术上的妥协或权衡。它类似于财务债务，是对未来付出代价的承诺。技术债务可以包括未完成的功能、低质量的代码、技术陈旧或过时、缺乏文档和测试覆盖等。这些债务会增加软件系统的复杂性、降低可维护性，并增加未来开发和维护的成本。与财务债务类似，技术债务也需要及时偿还，以确保软件系统的质量和可持续性。技术团队通常会努力减少技术债务，并在合适的时机进行技术债务的还清和重构。</p><h3 id="技术债务如何偿还"><a href="#技术债务如何偿还" class="headerlink" title="技术债务如何偿还"></a>技术债务如何偿还</h3><p>技术债务的偿还是一个重要的过程，它有助于改善软件系统的质量和可维护性。以下是一些常见的技术债务偿还策略：</p><ol><li><p>重构代码：通过重构低质量的代码，改善其可读性、可维护性和性能。这包括使用最佳实践和设计模式来优化代码结构和逻辑。</p></li><li><p>添加测试覆盖：为没有足够测试覆盖的代码编写单元测试、集成测试和端到端测试。这样可以更好地保证代码的正确性和稳定性。</p></li><li><p>更新技术栈：评估和更新过时的技术和工具，以提高系统的性能、安全性和可维护性。这可能涉及到升级框架、库和依赖项，以及采用新的开发实践和工具。</p></li><li><p>改进文档和注释：完善代码的文档和注释，使其更易于理解和维护。这有助于新的开发人员快速上手，并减少未来开发的困惑和错误。</p></li><li><p>优化性能：识别并解决系统中的性能问题，包括减少响应时间、提高并发处理能力和优化资源利用率。</p></li><li><p>追踪技术债务：建立技术债务的追踪和管理机制，以确保它们得到适时的关注和处理。这可以通过使用专门的工具或集成到项目管理工具中来实现。</p></li></ol><p>需要注意的是，技术债务的偿还需要权衡时间、资源和优先级。团队应该根据项目的需求和优先级，制定合理的计划和策略来偿还技术债务，以最大程度地提高软件系统的质量和可持续性。</p><h3 id="我在项目中如何管理技术债"><a href="#我在项目中如何管理技术债" class="headerlink" title="我在项目中如何管理技术债"></a>我在项目中如何管理技术债</h3><ol><li>利用JIRA来记录技术债：<ul><li>JIRA中新建任务类型：技术债务</li><li>（业务代码）业务小组通过在迭代过程中发现并记录到Jira backlog中</li><li>（基础组件）架构小组至少每个月主动去cod review一次以上，发现并记录到Jira backlog中</li></ul></li><li>分析并评估backlog中每个技术债的优先级和工时</li><li>产品迭代过程中，评估下个版本业务需求范围时，适当地、合理地安排工期短、优先级高的技术债纳入版本范围，并全员宣讲，每日站会跟进</li><li>对于中低优先级的技术债，以月或季为纬度，单独建立冲刺，临时成立研发+测试小组，利用空单时间来处理，每周周会跟进</li></ol><p><img src="/../imgs/image-20231030161826690.png" alt="image-20231030161826690"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/../imgs/technicalTebt_4.jpeg&quot; alt=&quot;technicalTebt_4&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;何为技术债务&quot;&gt;&lt;a href=&quot;#何为技术债务&quot; class=&quot;headerlink&quot; title=&quot;何为技术债务&quot;&gt;&lt;</summary>
      
    
    
    
    
    <category term="技术债" scheme="http://example.com/tags/%E6%8A%80%E6%9C%AF%E5%80%BA/"/>
    
  </entry>
  
  <entry>
    <title>JVM知识点</title>
    <link href="http://example.com/2023/10/27/JVM%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>http://example.com/2023/10/27/JVM%E7%9F%A5%E8%AF%86%E7%82%B9/</id>
    <published>2023-10-26T16:00:00.000Z</published>
    <updated>2023-10-30T07:05:29.467Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-JVM的区域划分"><a href="#1-JVM的区域划分" class="headerlink" title="1.JVM的区域划分"></a>1.JVM的区域划分</h3><p><img src="/../imgs/85c8de7528cc4565aba2f517b00aef78.png" alt="85c8de7528cc4565aba2f517b00aef78"></p><ol><li>程序计数器（Program Counter）：线程私有，程序计数器是一块较小的内存区域，它保存着当前线程执行的字节码指令的地址。在线程切换时，程序计数器用于恢复执行的位置。</li><li>Java 虚拟机栈（Java Virtual Machine Stack）：线程私有，每个线程在运行时都会创建一个对应的虚拟机栈，用于存储方法的局部变量、操作数栈、动态链接、方法出口等信息。虚拟机栈的大小可以通过 -Xss 参数进行调整。</li><li>本地方法栈（Native Method Stack）：线程私有，本地方法栈与虚拟机栈类似，但是它为本地方法（Native Method）服务。本地方法是使用其他语言（如 C&#x2F;C++）编写的方法，通过 JNI（Java Native Interface）与 Java 程序进行交互。</li><li>Java 堆（Java Heap）：线程共享，Java 堆是 Java 程序运行时创建的对象的存储区域。它是垃圾回收的主要区域，包括新生代和老年代<ul><li>新生代（Young Generation）：新生代是 Java 堆的一部分，用于存储新创建的对象。新生代通常被划分为 Eden 空间和两个 Survivor 空间（From 和 To）。大部分对象在新生代被创建和销毁。</li><li>老年代（Old Generation）：老年代用于存储生命周期较长的对象。经过多次垃圾回收后仍然存活的对象会被转移到老年代。老年代的空间通常较大。</li></ul></li><li>方法区（Method Area）：线程共享，方法区用于存储类的结构信息（如类名、方法名、字段名）、静态变量、常量池等。在 JDK 1.8 中，方法区被移除，取而代之的是元空间（Metaspace）。</li><li>元空间（Metaspace）：线程共享，元空间取代了 JDK 1.8 之前的永久代（Permanent Generation）。元空间用于存储类的元数据信息，包括类的结构、方法、字段、常量池等。元空间的大小默认是不受限制的，但受到操作系统的限制。</li></ol><p>以上是 java 8 的内存区域划分。需要注意的是，不同版本的 JDK 可能会有细微的差异，特别是在垃圾回收和内存管理方面</p><h3 id="2-堆的区域划分"><a href="#2-堆的区域划分" class="headerlink" title="2.堆的区域划分"></a>2.堆的区域划分</h3><p>在 Java 的堆（Heap）内存中，可以进一步划分为以下几个区域：</p><ol><li>新生代（Young Generation）：新生代是堆内存中的一部分，用于存储新创建的对象。新生代可以进一步划分为 Eden 空间和两个 Survivor 空间（通常称为 From 和 To 空间）<ul><li>Eden(伊甸园) 空间：Eden 空间是新对象的初始分配区域。当 Eden 空间满时，触发一次 Minor GC（Young GC）</li><li>Survivor(幸存者) 空间：Survivor 空间是用于存放在 Minor GC 过程中幸存下来的对象。在每次 Minor GC 后，仍然存活的对象会被复制到 Survivor 空间中的一个空闲区域。而上一次 GC 时的 Survivor 空间则会被清空</li></ul></li><li>老年代（Old Generation）：老年代是存放经过多次 Minor GC 后仍然存活的对象的区域。老年代的对象一般具有较长的生命周期。当老年代空间不足时，会触发一次 Major GC（Full GC）</li><li>元数据区（Metaspace）：元数据区是用于存储类的元数据信息，包括类的结构、方法、字段、常量池等。在较新的 JDK 版本中，元数据区取代了传统的永久代（Permanent Generation）。元数据区的大小默认是不受限制的，但受到操作系统的限制</li><li>大对象区域（Large Object Space）：大对象区域是专门用于存储较大的对象，避免在新生代和老年代中频繁进行内存拷贝。一般情况下，大对象直接分配在大对象区域</li></ol><p>需要注意的是，堆内存的划分可能会因为不同的垃圾回收器（Garbage Collector）策略而有所不同。不同的垃圾回收器在堆内存划分和对象分配上有不同的优化方式。</p><h3 id="3-java的局部变量、成员变量、静态变量、类、对象等内存是如何分配的"><a href="#3-java的局部变量、成员变量、静态变量、类、对象等内存是如何分配的" class="headerlink" title="3.java的局部变量、成员变量、静态变量、类、对象等内存是如何分配的"></a>3.java的局部变量、成员变量、静态变量、类、对象等内存是如何分配的</h3><p>在 Java 中，局部变量、成员变量、静态变量、类和对象的内存分配如下：</p><ol><li>局部变量（Local Variables）：局部变量是在方法、构造器或代码块内部定义的变量。它们在方法被调用时创建，并在方法执行结束后销毁。局部变量的内存分配在栈（Stack）上进行，存储在栈帧（Stack Frame）中。</li><li>成员变量（Instance Variables）：成员变量是在类中定义的变量，属于类的实例。每个类的实例都有自己的成员变量副本。成员变量的内存分配在堆（Heap）上进行，当创建对象时，会为每个实例分配一块堆内存来存储成员变量。</li><li>静态变量（Static Variables）：静态变量是在类中定义的使用 static 修饰的变量，属于类本身而不是类的实例。静态变量的内存分配在方法区（Method Area）中，它们在程序启动时初始化，并在整个程序运行期间存在。</li><li>类（Class）：类的定义在方法区中，包括类的结构、字段、方法和字节码等信息。类的信息在程序加载时被加载到方法区中，并在整个程序运行期间存在。</li><li>对象（Objects）：对象是类的实例化，每个对象都有自己的一块堆内存空间来存储实例变量。对象的内存分配在堆上进行，当使用关键字 new 创建对象时，会在堆中分配一块连续的内存空间来存储对象的实例变量。</li></ol><p>需要注意的是，局部变量和方法参数在方法调用结束后会被销毁，而成员变量和静态变量的生命周期与对象和类的生命周期相关。</p><h3 id="4-JVM的垃圾回收机制是怎样的"><a href="#4-JVM的垃圾回收机制是怎样的" class="headerlink" title="4.JVM的垃圾回收机制是怎样的"></a>4.JVM的垃圾回收机制是怎样的</h3><p>JVM（Java虚拟机）的垃圾回收机制是自动管理和释放内存的一种机制，用于回收不再使用的对象，以提供更多的可用内存空间。</p><p>垃圾回收机制的基本原理是通过标记和清除（Mark and Sweep）的过程来确定哪些对象可以被回收。以下是垃圾回收机制的主要步骤：</p><ol><li><p>标记（Marking）：从根对象（如堆栈中的局部变量和静态变量）开始，递归地遍历所有可访问的对象，并将它们标记为“活动”对象。未被标记的对象即为“垃圾”对象。</p></li><li><p>清除（Sweeping）：在标记完成后，垃圾回收器会扫描整个堆内存，将未被标记的对象释放，并回收它们占用的内存空间。被标记的对象将保留下来，用于后续的内存分配。</p></li><li><p>压缩（Compacting）：在清除阶段之后，为了提高内存的连续性和空间利用率，一些垃圾回收器还会执行内存压缩操作。压缩过程会将存活的对象紧凑地移动到堆的一端，以便在另一端释放更多的连续内存空间。</p></li></ol><p>垃圾回收机制的具体实现可以有多种算法和策略，如标记-清除算法、复制算法、标记-整理算法等。不同的垃圾回收器（如Serial、Parallel、CMS、G1等）使用不同的算法和策略，以适应不同的应用场景和性能需求。</p><p>通过垃圾回收机制，Java程序可以更方便地管理内存，避免显式地进行内存释放操作，减少内存泄漏和内存溢出的风险。</p><h3 id="5-oracle-jdk-1-8-0-321-触发垃圾回收的时机"><a href="#5-oracle-jdk-1-8-0-321-触发垃圾回收的时机" class="headerlink" title="5. oracle jdk 1.8.0_321 触发垃圾回收的时机"></a>5. oracle jdk 1.8.0_321 触发垃圾回收的时机</h3><p>在 Oracle JDK 1.8.0_321（Java 8 Update 321）中，垃圾回收的时机是由 JVM（Java虚拟机）自动管理的，我们无法直接触发垃圾回收。</p><p>JVM 使用了一种称为 “自适应垃圾回收” 的策略来判断何时执行垃圾回收操作。它基于以下几个因素来决定是否触发垃圾回收：</p><ol><li><p>堆内存的使用情况：当堆内存中的对象达到一定的阈值时，JVM 可能会触发垃圾回收来释放不再使用的对象。</p></li><li><p>内存分配速率：JVM 会监控对象的分配速率。如果分配速率过高，可能导致堆内存快速填满，JVM 可能会触发垃圾回收来释放不再使用的对象。</p></li><li><p>系统资源：JVM 还会考虑系统的资源情况，如 CPU 使用率和可用内存等。如果系统资源紧张，JVM 可能会触发垃圾回收来释放内存资源。</p></li></ol><p>请注意，以上是一些触发垃圾回收的常见因素，具体的策略可能会因 JVM 的版本和配置而有所不同。此外，我们也可以通过一些参数来调整垃圾回收的行为，例如 <code>-XX:MaxGCPauseMillis</code> 参数可以指定最大垃圾回收停顿时间。</p><p>总之，在 Oracle JDK 1.8.0_321 中，垃圾回收的时机是由 JVM 自动管理的，基于堆内存使用情况、内存分配速率和系统资源等因素来判断何时执行垃圾回收操作。</p><h3 id="6-什么场景下会触发新生代的垃圾回收"><a href="#6-什么场景下会触发新生代的垃圾回收" class="headerlink" title="6.什么场景下会触发新生代的垃圾回收"></a>6.什么场景下会触发新生代的垃圾回收</h3><p>新生代的垃圾回收是由 JVM（Java虚拟机）自动触发的，通常在以下情况下会触发年轻代的垃圾回收：</p><ol><li><p>Minor GC（部分垃圾回收）：当新对象被分配到年轻代时，如果年轻代空间不足，JVM 会触发 Minor GC。Minor GC 主要清理年轻代中不再使用的对象，以释放空间供新对象使用。</p></li><li><p>对象年龄达到阈值：年轻代中的对象会根据其存活时间进行年龄计数。当对象经过多次 Minor GC 后仍然存活，并且达到一定的年龄阈值时，JVM 会将这些对象晋升到老年代。晋升到老年代的过程也会触发年轻代的垃圾回收。</p></li><li><p>空间分配担保失败：在进行 Minor GC 时，如果存活对象太多，导致年轻代无法容纳所有存活对象，JVM 可能会进行一次 Full GC（完全垃圾回收）。在 Full GC 之前，为了确保空间分配的安全性，JVM 会先触发一次年轻代的垃圾回收。</p></li></ol><p>请注意，年轻代的垃圾回收是 JVM 内部自动管理的过程，我们无法直接触发或控制。JVM 根据对象的生命周期和内存分配情况来判断何时进行垃圾回收操作。</p><h3 id="7-什么场景下会触发老年代的垃圾回收"><a href="#7-什么场景下会触发老年代的垃圾回收" class="headerlink" title="7.什么场景下会触发老年代的垃圾回收"></a>7.什么场景下会触发老年代的垃圾回收</h3><p>老年代的垃圾回收是由 JVM（Java虚拟机）自动触发的，通常在以下情况下会触发老年代的垃圾回收：</p><ol><li><p>Major GC（完全垃圾回收）：当老年代空间不足时，JVM 会触发 Major GC。Major GC 主要清理老年代中不再使用的对象，以释放空间供新对象使用。</p></li><li><p>晋升担保失败：在进行 Minor GC 时，如果存活对象太多，导致老年代无法容纳所有存活对象，JVM 可能会进行一次 Full GC（完全垃圾回收）。在 Full GC 之前，JVM 会先触发一次老年代的垃圾回收，以尽量减少 Full GC 的频率。</p></li><li><p>显式调用 System.gc()：尽管不建议显式调用 System.gc() 方法，但在某些情况下，我们可能会手动触发垃圾回收。当调用 System.gc() 方法时，JVM 可能会同时触发年轻代和老年代的垃圾回收。</p></li></ol><p>需要注意的是，老年代的垃圾回收相对较少发生，因为老年代中的对象通常具有较长的生命周期。JVM 会根据对象的存活时间和内存分配情况来判断何时进行垃圾回收操作。</p><p>请注意，我们通常不建议频繁地手动触发垃圾回收，因为 JVM 在内部已经有自动的垃圾回收机制来管理内存。频繁的垃圾回收可能会导致性能下降，应该根据具体情况进行调优和配置。</p><h3 id="8-对象的存活时间"><a href="#8-对象的存活时间" class="headerlink" title="8.对象的存活时间"></a>8.对象的存活时间</h3><p>对象的存活时间是指对象从被创建到被垃圾回收之间的时间段。在 Java 中，对象的存活时间可以分为以下几种情况：</p><ol><li><p>瞬时对象（Transient Objects）：瞬时对象是指那些在方法中创建并在方法执行结束后立即被销毁的对象。它们的存活时间非常短暂，仅在方法的生命周期内存在。</p></li><li><p>局部对象（Local Objects）：局部对象是在方法中定义的对象，它们的作用域仅限于方法内部。当方法执行结束后，局部对象会被销毁，它们的存活时间与方法的执行时间相对应。</p></li><li><p>成员对象（Member Objects）：成员对象是在类中定义的对象，它们的生命周期与类的实例相关。当类的实例不再被引用时，成员对象会随着实例一起被垃圾回收。</p></li><li><p>静态对象（Static Objects）：静态对象是在类中定义的 static 修饰的对象，它们的生命周期与类的生命周期相同。静态对象在程序运行期间一直存在，直到程序结束或类被卸载时才会被垃圾回收。</p></li><li><p>长生命周期对象（Long-lived Objects）：长生命周期对象是指存活时间较长的对象，它们通常分配在老年代。这些对象可能是全局缓存、持久化对象等，它们的存活时间可能会跨越多个方法调用或甚至整个应用程序的生命周期。</p></li></ol><p>需要注意的是，对象的存活时间由 JVM 内部的垃圾回收算法和内存分配策略来决定。JVM 会根据对象的引用关系、内存分配情况以及垃圾回收的算法来判断对象的存活时间，并相应地进行垃圾回收。</p><h3 id="9-oracle-jdk-1-8-0-321-的参数设置"><a href="#9-oracle-jdk-1-8-0-321-的参数设置" class="headerlink" title="9.oracle jdk 1.8.0_321 的参数设置"></a>9.oracle jdk 1.8.0_321 的参数设置</h3><p>在 Oracle JDK 1.8.0_321 中，有许多参数可以用来调整 JVM（Java虚拟机）的行为。以下是一些常见的参数及其解释，包括一些示例：</p><ol><li><p><code>-Xmx&lt;size&gt;</code>：设置最大堆内存大小。<code>&lt;size&gt;</code> 是以字节为单位的整数值，或者带有 <code>g</code> 或 <code>G</code> 后缀的以 GB 为单位的整数值。例如，<code>-Xmx2g</code> 表示将最大堆内存设置为 2 GB。</p></li><li><p><code>-Xms&lt;size&gt;</code>：设置初始堆内存大小。<code>&lt;size&gt;</code> 的格式和单位与 <code>-Xmx</code> 参数相同。例如，<code>-Xms512m</code> 表示将初始堆内存设置为 512 MB。</p></li><li><p><code>-Xmn&lt;size&gt;</code>：设置年轻代的大小。<code>&lt;size&gt;</code> 的格式和单位与 <code>-Xmx</code> 参数相同。例如，<code>-Xmn256m</code> 表示将年轻代的大小设置为 256 MB。</p></li><li><p><code>-XX:MaxPermSize=&lt;size&gt;</code>：设置最大永久代（PermGen）大小。<code>&lt;size&gt;</code> 的格式和单位与 <code>-Xmx</code> 参数相同。例如，<code>-XX:MaxPermSize=128m</code> 表示将最大永久代大小设置为 128 MB。</p></li><li><p><code>-XX:ParallelGCThreads=&lt;num&gt;</code>：设置并行垃圾回收的线程数。<code>&lt;num&gt;</code> 是一个整数值，表示线程的数量。例如，<code>-XX:ParallelGCThreads=4</code> 表示使用 4 个线程进行并行垃圾回收。</p></li><li><p><code>-XX:+UseConcMarkSweepGC</code>：启用并发标记清除（CMS）垃圾回收器。例如，<code>-XX:+UseConcMarkSweepGC</code> 表示使用 CMS 垃圾回收器。</p></li><li><p><code>-XX:+PrintGCDetails</code>：在控制台上打印详细的垃圾回收信息。例如，<code>-XX:+PrintGCDetails</code> 表示打印详细的垃圾回收信息。</p></li></ol><p>这些只是一小部分常见的参数，还有许多其他参数可以用来调整 JVM 的行为。您可以参考 Oracle JDK 文档中的详细参数列表来了解更多选项和说明。</p><p>请注意，不同的 JDK 版本可能会有不同的参数和行为，因此建议在具体应用中根据需求和性能进行适当的调整和配置。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-JVM的区域划分&quot;&gt;&lt;a href=&quot;#1-JVM的区域划分&quot; class=&quot;headerlink&quot; title=&quot;1.JVM的区域划分&quot;&gt;&lt;/a&gt;1.JVM的区域划分&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/../imgs/85c8de7528cc4565aba</summary>
      
    
    
    
    
    <category term="JVM" scheme="http://example.com/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>Git常用命令</title>
    <link href="http://example.com/2023/10/19/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://example.com/2023/10/19/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2023-10-18T16:00:00.000Z</published>
    <updated>2023-10-19T03:44:25.023Z</updated>
    
    <content type="html"><![CDATA[<ol><li>查看当前项目的所有远程分支<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git branch -r</span><br><span class="line"># 如果只想查看远程分支的名称，可以使用 --list 或 -l 选项</span><br><span class="line">git branch -r --list</span><br></pre></td></tr></table></figure></li><li>查看当前项目的所有本地分支<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git branch </span><br><span class="line"># 如果只想查看远程分支的名称，可以使用 --list 或 -l 选项</span><br><span class="line">git branch --list</span><br><span class="line"># 如果想查看本地分支的详细信息，可以使用 -v 选项</span><br><span class="line">git branch -v</span><br></pre></td></tr></table></figure></li><li>查看某个分支的最近一次提交<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 使用 -1 选项可以限制日志输出为只显示一次提交</span><br><span class="line">git log -1 prod-v3.9.1</span><br></pre></td></tr></table></figure></li><li>查看某个作者的最近一次提交<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># &lt;author-name&gt; 是你要查找的作者的名称</span><br><span class="line">git log --author=&quot;John Doe&quot; -n 1</span><br></pre></td></tr></table></figure></li><li>查看当前分支某个文件的最近一次提交<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># HEAD表示最新的提交</span><br><span class="line">git show head src/main/java/com/ylsk/b2b3/service/sys/UserAgentService.java </span><br></pre></td></tr></table></figure></li><li>查看某一次提交的所有文件</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># &lt;commit-hash&gt; 是你要查看的提交的哈希值或引用</span><br><span class="line">git show --name-only 4505f7817a4f56b4e8581ea8985609b7ef47748b</span><br></pre></td></tr></table></figure><ol start="7"><li>查看某一次提交的某个文件的详细内容<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git show 4505f7817a4f56b4e8581ea8985609b7ef47748b wyt/custMap/CustMapSurveyInfoToESRepo.yml</span><br></pre></td></tr></table></figure></li><li>合并分支<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 注意如果有冲突发生，你需要解决冲突并手动提交修改。冲突文件会在合并日志中显示</span><br><span class="line">git merge &lt;other_branch&gt;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;查看当前项目的所有远程分支&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;lin</summary>
      
    
    
    
    
    <category term="工具" scheme="http://example.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>markdown常用语法</title>
    <link href="http://example.com/2023/09/27/markdown%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/"/>
    <id>http://example.com/2023/09/27/markdown%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/</id>
    <published>2023-09-27T10:23:20.697Z</published>
    <updated>2023-09-27T12:06:06.253Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"># 这是一级标题</span><br><span class="line"></span><br><span class="line">## 这是二级标题</span><br><span class="line">###### 这是六级标题</span><br><span class="line">&gt; 这是一个有两段的块引用。这是第一段</span><br><span class="line">&gt; </span><br><span class="line">&gt; 这是第二段。Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt; 这是另一个只有一个段落的块引用。有三个空行分割两个块引用。</span><br><span class="line">### 无序列表</span><br><span class="line">* 红色</span><br><span class="line">* 绿色</span><br><span class="line">* 蓝色</span><br><span class="line">### 有序列表</span><br><span class="line">1. 红色</span><br><span class="line">2.     绿色</span><br><span class="line">3.     蓝色</span><br><span class="line">### 任务列表</span><br><span class="line">- [ ] 这是一个任务列表项</span><br><span class="line">- [ ] 需要在前面使用列表的语法</span><br><span class="line">- [ ] 未完成</span><br><span class="line">- [x] 完成</span><br><span class="line">### 代码块</span><br><span class="line">例如：~~~ruby 代码 ~~~</span><br><span class="line">### 表格</span><br><span class="line">| 第一列 | 第二列 | 第三列 |</span><br><span class="line">| ------ | ------ | ------ |</span><br><span class="line">| 第一行 | 1      | 张三   |</span><br><span class="line">| 第二行 | 2      | 李四   |</span><br><span class="line">| 第三行 | 3      | 王五   |</span><br><span class="line">### 水平线</span><br><span class="line">***</span><br><span class="line">### 链接</span><br><span class="line">this is [ an example](http://example.com/ &quot;Title&quot;) inline link.</span><br><span class="line">[ this link ](http://example.net/) has no title attribute.</span><br><span class="line">### URL网址</span><br><span class="line">&lt;www.google.com&gt;</span><br><span class="line">### 高亮</span><br><span class="line">必须先到设置中启用它。==高亮==</span><br><span class="line">### HTML</span><br><span class="line">您可以使用HTML来设置纯 Markdown 不支持的内容，例如， &lt;span style=&quot;color:red&quot;&gt;this text is red&lt;/span&gt; 用于添加红色文本。</span><br><span class="line">### 表情符号</span><br><span class="line">输入表情符号的语法是 :smile:</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span c</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2023/08/04/hello-world/"/>
    <id>http://example.com/2023/08/04/hello-world/</id>
    <published>2023-08-04T07:11:45.955Z</published>
    <updated>2023-08-05T12:00:09.347Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
