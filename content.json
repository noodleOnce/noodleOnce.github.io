{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://example.com","root":"/"},"pages":[{"title":"书单","date":"2023-08-05T10:38:26.342Z","updated":"2023-08-04T07:57:06.674Z","comments":false,"path":"books/index.html","permalink":"http://example.com/books/index.html","excerpt":"","text":""},{"title":"404 Not Found：该页无法显示","date":"2023-08-04T10:21:10.417Z","updated":"2023-08-04T07:57:06.673Z","comments":false,"path":"/404.html","permalink":"http://example.com/404.html","excerpt":"","text":""},{"title":"关于","date":"2023-08-05T11:10:39.068Z","updated":"2023-08-05T11:10:39.068Z","comments":false,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":"个人详细介绍"},{"title":"Repositories","date":"2023-08-05T10:38:44.348Z","updated":"2023-08-04T07:57:06.674Z","comments":false,"path":"repository/index.html","permalink":"http://example.com/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2023-10-19T03:44:45.069Z","updated":"2023-08-04T07:57:06.674Z","comments":false,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""},{"title":"分类","date":"2023-10-19T03:43:33.503Z","updated":"2023-08-04T07:57:06.674Z","comments":false,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2023-10-19T03:43:25.876Z","updated":"2023-08-04T07:57:06.674Z","comments":true,"path":"links/index.html","permalink":"http://example.com/links/index.html","excerpt":"","text":""}],"posts":[{"title":"Bug等级划分","slug":"Bug等级划分","date":"2023-11-30T16:00:00.000Z","updated":"2023-10-31T03:17:49.962Z","comments":true,"path":"2023/12/01/Bug等级划分/","link":"","permalink":"http://example.com/2023/12/01/Bug%E7%AD%89%E7%BA%A7%E5%88%92%E5%88%86/","excerpt":"","text":"软件Bug的来源Bug，原意为虫子，现在通常指软件缺陷、故障、问题等。 第一代计算机是由许多庞大且昂贵的继电器组成，并利用大量的电力来使继电器工作。可能正是由于计算机运行产生的光和热，引得一只小虫子Bug钻进了一支继电器内，导致整个计算机无法工作。 研究人员费了半天时间，总算发现原因所在，把这只小虫子从继电器中取出后，计算机又恢复正常。后来，Bug这个名词就沿用下来，表示电脑系统或程序中隐藏的错误、缺陷，漏洞或问题。 软件Bug的等级软件bug一般分为四种或五种等级，不同的软件领域，划分的可能略有差异，但大同小异。 一级（致命）Bug 通常表现为：主流程无法跑通，系统无法运行，崩溃或严重资源不足，应用模块无法启动或异常退出，主要功能模块无法使用。 比如： 1.内存泄漏； 2.严重的数值计算错误； 3.系统容易崩溃； 4.功能设计与需求严重不符； 5.系统无法登陆； 6.循坏报错，无法正常退出。 二级（严重）Bug通常表现为：影响系统功能或操作，主要功能存在严重缺陷，但不会影响到系统稳定性。 比如：1.功能未实现；2.功能存在报错；3.数值轻微的计算错误。 三级（一般）Bug通常表现为：界面、性能缺陷。 比如：1.边界条件下错误；2.容错性不好；3.大数据下容易无响应；4.大数据操作时，没有提供进度条。 四级（提示）Bug通常表现为：易用性及建议性问题比如：1.界面颜色搭配不好；2.文字排列不整齐；3.出现错别字，但是不影响功能；4.界面格式不规范。","categories":[],"tags":[{"name":"项目管理","slug":"项目管理","permalink":"http://example.com/tags/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"}]},{"title":"浅谈技术负债","slug":"浅谈技术负债","date":"2023-10-29T16:00:00.000Z","updated":"2023-10-30T08:28:41.412Z","comments":true,"path":"2023/10/30/浅谈技术负债/","link":"","permalink":"http://example.com/2023/10/30/%E6%B5%85%E8%B0%88%E6%8A%80%E6%9C%AF%E8%B4%9F%E5%80%BA/","excerpt":"","text":"何为技术债务技术债务：是指在软件开发过程中，为了快速交付产品或功能而采取的技术上的妥协或权衡。它类似于财务债务，是对未来付出代价的承诺。技术债务可以包括未完成的功能、低质量的代码、技术陈旧或过时、缺乏文档和测试覆盖等。这些债务会增加软件系统的复杂性、降低可维护性，并增加未来开发和维护的成本。与财务债务类似，技术债务也需要及时偿还，以确保软件系统的质量和可持续性。技术团队通常会努力减少技术债务，并在合适的时机进行技术债务的还清和重构。 技术债务如何偿还技术债务的偿还是一个重要的过程，它有助于改善软件系统的质量和可维护性。以下是一些常见的技术债务偿还策略： 重构代码：通过重构低质量的代码，改善其可读性、可维护性和性能。这包括使用最佳实践和设计模式来优化代码结构和逻辑。 添加测试覆盖：为没有足够测试覆盖的代码编写单元测试、集成测试和端到端测试。这样可以更好地保证代码的正确性和稳定性。 更新技术栈：评估和更新过时的技术和工具，以提高系统的性能、安全性和可维护性。这可能涉及到升级框架、库和依赖项，以及采用新的开发实践和工具。 改进文档和注释：完善代码的文档和注释，使其更易于理解和维护。这有助于新的开发人员快速上手，并减少未来开发的困惑和错误。 优化性能：识别并解决系统中的性能问题，包括减少响应时间、提高并发处理能力和优化资源利用率。 追踪技术债务：建立技术债务的追踪和管理机制，以确保它们得到适时的关注和处理。这可以通过使用专门的工具或集成到项目管理工具中来实现。 需要注意的是，技术债务的偿还需要权衡时间、资源和优先级。团队应该根据项目的需求和优先级，制定合理的计划和策略来偿还技术债务，以最大程度地提高软件系统的质量和可持续性。 我在项目中如何管理技术债 利用JIRA来记录技术债： JIRA中新建任务类型：技术债务 （业务代码）业务小组通过在迭代过程中发现并记录到Jira backlog中 （基础组件）架构小组至少每个月主动去cod review一次以上，发现并记录到Jira backlog中 分析并评估backlog中每个技术债的优先级和工时 产品迭代过程中，评估下个版本业务需求范围时，适当地、合理地安排工期短、优先级高的技术债纳入版本范围，并全员宣讲，每日站会跟进 对于中低优先级的技术债，以月或季为纬度，单独建立冲刺，临时成立研发+测试小组，利用空档时间来处理，每周周会跟进","categories":[],"tags":[{"name":"技术债","slug":"技术债","permalink":"http://example.com/tags/%E6%8A%80%E6%9C%AF%E5%80%BA/"}]},{"title":"JVM知识点","slug":"JVM知识点","date":"2023-10-26T16:00:00.000Z","updated":"2023-10-30T07:05:29.467Z","comments":true,"path":"2023/10/27/JVM知识点/","link":"","permalink":"http://example.com/2023/10/27/JVM%E7%9F%A5%E8%AF%86%E7%82%B9/","excerpt":"","text":"1.JVM的区域划分 程序计数器（Program Counter）：线程私有，程序计数器是一块较小的内存区域，它保存着当前线程执行的字节码指令的地址。在线程切换时，程序计数器用于恢复执行的位置。 Java 虚拟机栈（Java Virtual Machine Stack）：线程私有，每个线程在运行时都会创建一个对应的虚拟机栈，用于存储方法的局部变量、操作数栈、动态链接、方法出口等信息。虚拟机栈的大小可以通过 -Xss 参数进行调整。 本地方法栈（Native Method Stack）：线程私有，本地方法栈与虚拟机栈类似，但是它为本地方法（Native Method）服务。本地方法是使用其他语言（如 C&#x2F;C++）编写的方法，通过 JNI（Java Native Interface）与 Java 程序进行交互。 Java 堆（Java Heap）：线程共享，Java 堆是 Java 程序运行时创建的对象的存储区域。它是垃圾回收的主要区域，包括新生代和老年代 新生代（Young Generation）：新生代是 Java 堆的一部分，用于存储新创建的对象。新生代通常被划分为 Eden 空间和两个 Survivor 空间（From 和 To）。大部分对象在新生代被创建和销毁。 老年代（Old Generation）：老年代用于存储生命周期较长的对象。经过多次垃圾回收后仍然存活的对象会被转移到老年代。老年代的空间通常较大。 方法区（Method Area）：线程共享，方法区用于存储类的结构信息（如类名、方法名、字段名）、静态变量、常量池等。在 JDK 1.8 中，方法区被移除，取而代之的是元空间（Metaspace）。 元空间（Metaspace）：线程共享，元空间取代了 JDK 1.8 之前的永久代（Permanent Generation）。元空间用于存储类的元数据信息，包括类的结构、方法、字段、常量池等。元空间的大小默认是不受限制的，但受到操作系统的限制。 以上是 java 8 的内存区域划分。需要注意的是，不同版本的 JDK 可能会有细微的差异，特别是在垃圾回收和内存管理方面 2.堆的区域划分在 Java 的堆（Heap）内存中，可以进一步划分为以下几个区域： 新生代（Young Generation）：新生代是堆内存中的一部分，用于存储新创建的对象。新生代可以进一步划分为 Eden 空间和两个 Survivor 空间（通常称为 From 和 To 空间） Eden(伊甸园) 空间：Eden 空间是新对象的初始分配区域。当 Eden 空间满时，触发一次 Minor GC（Young GC） Survivor(幸存者) 空间：Survivor 空间是用于存放在 Minor GC 过程中幸存下来的对象。在每次 Minor GC 后，仍然存活的对象会被复制到 Survivor 空间中的一个空闲区域。而上一次 GC 时的 Survivor 空间则会被清空 老年代（Old Generation）：老年代是存放经过多次 Minor GC 后仍然存活的对象的区域。老年代的对象一般具有较长的生命周期。当老年代空间不足时，会触发一次 Major GC（Full GC） 元数据区（Metaspace）：元数据区是用于存储类的元数据信息，包括类的结构、方法、字段、常量池等。在较新的 JDK 版本中，元数据区取代了传统的永久代（Permanent Generation）。元数据区的大小默认是不受限制的，但受到操作系统的限制 大对象区域（Large Object Space）：大对象区域是专门用于存储较大的对象，避免在新生代和老年代中频繁进行内存拷贝。一般情况下，大对象直接分配在大对象区域 需要注意的是，堆内存的划分可能会因为不同的垃圾回收器（Garbage Collector）策略而有所不同。不同的垃圾回收器在堆内存划分和对象分配上有不同的优化方式。 3.java的局部变量、成员变量、静态变量、类、对象等内存是如何分配的在 Java 中，局部变量、成员变量、静态变量、类和对象的内存分配如下： 局部变量（Local Variables）：局部变量是在方法、构造器或代码块内部定义的变量。它们在方法被调用时创建，并在方法执行结束后销毁。局部变量的内存分配在栈（Stack）上进行，存储在栈帧（Stack Frame）中。 成员变量（Instance Variables）：成员变量是在类中定义的变量，属于类的实例。每个类的实例都有自己的成员变量副本。成员变量的内存分配在堆（Heap）上进行，当创建对象时，会为每个实例分配一块堆内存来存储成员变量。 静态变量（Static Variables）：静态变量是在类中定义的使用 static 修饰的变量，属于类本身而不是类的实例。静态变量的内存分配在方法区（Method Area）中，它们在程序启动时初始化，并在整个程序运行期间存在。 类（Class）：类的定义在方法区中，包括类的结构、字段、方法和字节码等信息。类的信息在程序加载时被加载到方法区中，并在整个程序运行期间存在。 对象（Objects）：对象是类的实例化，每个对象都有自己的一块堆内存空间来存储实例变量。对象的内存分配在堆上进行，当使用关键字 new 创建对象时，会在堆中分配一块连续的内存空间来存储对象的实例变量。 需要注意的是，局部变量和方法参数在方法调用结束后会被销毁，而成员变量和静态变量的生命周期与对象和类的生命周期相关。 4.JVM的垃圾回收机制是怎样的JVM（Java虚拟机）的垃圾回收机制是自动管理和释放内存的一种机制，用于回收不再使用的对象，以提供更多的可用内存空间。 垃圾回收机制的基本原理是通过标记和清除（Mark and Sweep）的过程来确定哪些对象可以被回收。以下是垃圾回收机制的主要步骤： 标记（Marking）：从根对象（如堆栈中的局部变量和静态变量）开始，递归地遍历所有可访问的对象，并将它们标记为“活动”对象。未被标记的对象即为“垃圾”对象。 清除（Sweeping）：在标记完成后，垃圾回收器会扫描整个堆内存，将未被标记的对象释放，并回收它们占用的内存空间。被标记的对象将保留下来，用于后续的内存分配。 压缩（Compacting）：在清除阶段之后，为了提高内存的连续性和空间利用率，一些垃圾回收器还会执行内存压缩操作。压缩过程会将存活的对象紧凑地移动到堆的一端，以便在另一端释放更多的连续内存空间。 垃圾回收机制的具体实现可以有多种算法和策略，如标记-清除算法、复制算法、标记-整理算法等。不同的垃圾回收器（如Serial、Parallel、CMS、G1等）使用不同的算法和策略，以适应不同的应用场景和性能需求。 通过垃圾回收机制，Java程序可以更方便地管理内存，避免显式地进行内存释放操作，减少内存泄漏和内存溢出的风险。 5. oracle jdk 1.8.0_321 触发垃圾回收的时机在 Oracle JDK 1.8.0_321（Java 8 Update 321）中，垃圾回收的时机是由 JVM（Java虚拟机）自动管理的，我们无法直接触发垃圾回收。 JVM 使用了一种称为 “自适应垃圾回收” 的策略来判断何时执行垃圾回收操作。它基于以下几个因素来决定是否触发垃圾回收： 堆内存的使用情况：当堆内存中的对象达到一定的阈值时，JVM 可能会触发垃圾回收来释放不再使用的对象。 内存分配速率：JVM 会监控对象的分配速率。如果分配速率过高，可能导致堆内存快速填满，JVM 可能会触发垃圾回收来释放不再使用的对象。 系统资源：JVM 还会考虑系统的资源情况，如 CPU 使用率和可用内存等。如果系统资源紧张，JVM 可能会触发垃圾回收来释放内存资源。 请注意，以上是一些触发垃圾回收的常见因素，具体的策略可能会因 JVM 的版本和配置而有所不同。此外，我们也可以通过一些参数来调整垃圾回收的行为，例如 -XX:MaxGCPauseMillis 参数可以指定最大垃圾回收停顿时间。 总之，在 Oracle JDK 1.8.0_321 中，垃圾回收的时机是由 JVM 自动管理的，基于堆内存使用情况、内存分配速率和系统资源等因素来判断何时执行垃圾回收操作。 6.什么场景下会触发新生代的垃圾回收新生代的垃圾回收是由 JVM（Java虚拟机）自动触发的，通常在以下情况下会触发年轻代的垃圾回收： Minor GC（部分垃圾回收）：当新对象被分配到年轻代时，如果年轻代空间不足，JVM 会触发 Minor GC。Minor GC 主要清理年轻代中不再使用的对象，以释放空间供新对象使用。 对象年龄达到阈值：年轻代中的对象会根据其存活时间进行年龄计数。当对象经过多次 Minor GC 后仍然存活，并且达到一定的年龄阈值时，JVM 会将这些对象晋升到老年代。晋升到老年代的过程也会触发年轻代的垃圾回收。 空间分配担保失败：在进行 Minor GC 时，如果存活对象太多，导致年轻代无法容纳所有存活对象，JVM 可能会进行一次 Full GC（完全垃圾回收）。在 Full GC 之前，为了确保空间分配的安全性，JVM 会先触发一次年轻代的垃圾回收。 请注意，年轻代的垃圾回收是 JVM 内部自动管理的过程，我们无法直接触发或控制。JVM 根据对象的生命周期和内存分配情况来判断何时进行垃圾回收操作。 7.什么场景下会触发老年代的垃圾回收老年代的垃圾回收是由 JVM（Java虚拟机）自动触发的，通常在以下情况下会触发老年代的垃圾回收： Major GC（完全垃圾回收）：当老年代空间不足时，JVM 会触发 Major GC。Major GC 主要清理老年代中不再使用的对象，以释放空间供新对象使用。 晋升担保失败：在进行 Minor GC 时，如果存活对象太多，导致老年代无法容纳所有存活对象，JVM 可能会进行一次 Full GC（完全垃圾回收）。在 Full GC 之前，JVM 会先触发一次老年代的垃圾回收，以尽量减少 Full GC 的频率。 显式调用 System.gc()：尽管不建议显式调用 System.gc() 方法，但在某些情况下，我们可能会手动触发垃圾回收。当调用 System.gc() 方法时，JVM 可能会同时触发年轻代和老年代的垃圾回收。 需要注意的是，老年代的垃圾回收相对较少发生，因为老年代中的对象通常具有较长的生命周期。JVM 会根据对象的存活时间和内存分配情况来判断何时进行垃圾回收操作。 请注意，我们通常不建议频繁地手动触发垃圾回收，因为 JVM 在内部已经有自动的垃圾回收机制来管理内存。频繁的垃圾回收可能会导致性能下降，应该根据具体情况进行调优和配置。 8.对象的存活时间对象的存活时间是指对象从被创建到被垃圾回收之间的时间段。在 Java 中，对象的存活时间可以分为以下几种情况： 瞬时对象（Transient Objects）：瞬时对象是指那些在方法中创建并在方法执行结束后立即被销毁的对象。它们的存活时间非常短暂，仅在方法的生命周期内存在。 局部对象（Local Objects）：局部对象是在方法中定义的对象，它们的作用域仅限于方法内部。当方法执行结束后，局部对象会被销毁，它们的存活时间与方法的执行时间相对应。 成员对象（Member Objects）：成员对象是在类中定义的对象，它们的生命周期与类的实例相关。当类的实例不再被引用时，成员对象会随着实例一起被垃圾回收。 静态对象（Static Objects）：静态对象是在类中定义的 static 修饰的对象，它们的生命周期与类的生命周期相同。静态对象在程序运行期间一直存在，直到程序结束或类被卸载时才会被垃圾回收。 长生命周期对象（Long-lived Objects）：长生命周期对象是指存活时间较长的对象，它们通常分配在老年代。这些对象可能是全局缓存、持久化对象等，它们的存活时间可能会跨越多个方法调用或甚至整个应用程序的生命周期。 需要注意的是，对象的存活时间由 JVM 内部的垃圾回收算法和内存分配策略来决定。JVM 会根据对象的引用关系、内存分配情况以及垃圾回收的算法来判断对象的存活时间，并相应地进行垃圾回收。 9.oracle jdk 1.8.0_321 的参数设置在 Oracle JDK 1.8.0_321 中，有许多参数可以用来调整 JVM（Java虚拟机）的行为。以下是一些常见的参数及其解释，包括一些示例： -Xmx&lt;size&gt;：设置最大堆内存大小。&lt;size&gt; 是以字节为单位的整数值，或者带有 g 或 G 后缀的以 GB 为单位的整数值。例如，-Xmx2g 表示将最大堆内存设置为 2 GB。 -Xms&lt;size&gt;：设置初始堆内存大小。&lt;size&gt; 的格式和单位与 -Xmx 参数相同。例如，-Xms512m 表示将初始堆内存设置为 512 MB。 -Xmn&lt;size&gt;：设置年轻代的大小。&lt;size&gt; 的格式和单位与 -Xmx 参数相同。例如，-Xmn256m 表示将年轻代的大小设置为 256 MB。 -XX:MaxPermSize=&lt;size&gt;：设置最大永久代（PermGen）大小。&lt;size&gt; 的格式和单位与 -Xmx 参数相同。例如，-XX:MaxPermSize=128m 表示将最大永久代大小设置为 128 MB。 -XX:ParallelGCThreads=&lt;num&gt;：设置并行垃圾回收的线程数。&lt;num&gt; 是一个整数值，表示线程的数量。例如，-XX:ParallelGCThreads=4 表示使用 4 个线程进行并行垃圾回收。 -XX:+UseConcMarkSweepGC：启用并发标记清除（CMS）垃圾回收器。例如，-XX:+UseConcMarkSweepGC 表示使用 CMS 垃圾回收器。 -XX:+PrintGCDetails：在控制台上打印详细的垃圾回收信息。例如，-XX:+PrintGCDetails 表示打印详细的垃圾回收信息。 这些只是一小部分常见的参数，还有许多其他参数可以用来调整 JVM 的行为。您可以参考 Oracle JDK 文档中的详细参数列表来了解更多选项和说明。 请注意，不同的 JDK 版本可能会有不同的参数和行为，因此建议在具体应用中根据需求和性能进行适当的调整和配置。","categories":[],"tags":[{"name":"JVM","slug":"JVM","permalink":"http://example.com/tags/JVM/"}]},{"title":"Git常用命令","slug":"Git常用命令","date":"2023-10-18T16:00:00.000Z","updated":"2023-10-19T03:44:25.023Z","comments":true,"path":"2023/10/19/Git常用命令/","link":"","permalink":"http://example.com/2023/10/19/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","excerpt":"","text":"查看当前项目的所有远程分支123git branch -r# 如果只想查看远程分支的名称，可以使用 --list 或 -l 选项git branch -r --list 查看当前项目的所有本地分支12345git branch # 如果只想查看远程分支的名称，可以使用 --list 或 -l 选项git branch --list# 如果想查看本地分支的详细信息，可以使用 -v 选项git branch -v 查看某个分支的最近一次提交12# 使用 -1 选项可以限制日志输出为只显示一次提交git log -1 prod-v3.9.1 查看某个作者的最近一次提交12# &lt;author-name&gt; 是你要查找的作者的名称git log --author=&quot;John Doe&quot; -n 1 查看当前分支某个文件的最近一次提交12# HEAD表示最新的提交git show head src/main/java/com/ylsk/b2b3/service/sys/UserAgentService.java 查看某一次提交的所有文件 12# &lt;commit-hash&gt; 是你要查看的提交的哈希值或引用git show --name-only 4505f7817a4f56b4e8581ea8985609b7ef47748b 查看某一次提交的某个文件的详细内容1git show 4505f7817a4f56b4e8581ea8985609b7ef47748b wyt/custMap/CustMapSurveyInfoToESRepo.yml 合并分支12# 注意如果有冲突发生，你需要解决冲突并手动提交修改。冲突文件会在合并日志中显示git merge &lt;other_branch&gt;","categories":[],"tags":[{"name":"工具","slug":"工具","permalink":"http://example.com/tags/%E5%B7%A5%E5%85%B7/"}]},{"title":"markdown常用语法","slug":"markdown常用语法","date":"2023-09-27T10:23:20.697Z","updated":"2023-09-27T12:06:06.253Z","comments":true,"path":"2023/09/27/markdown常用语法/","link":"","permalink":"http://example.com/2023/09/27/markdown%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445# 这是一级标题## 这是二级标题###### 这是六级标题&gt; 这是一个有两段的块引用。这是第一段&gt; &gt; 这是第二段。Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.&gt; 这是另一个只有一个段落的块引用。有三个空行分割两个块引用。### 无序列表* 红色* 绿色* 蓝色### 有序列表1. 红色2. 绿色3. 蓝色### 任务列表- [ ] 这是一个任务列表项- [ ] 需要在前面使用列表的语法- [ ] 未完成- [x] 完成### 代码块例如：~~~ruby 代码 ~~~### 表格| 第一列 | 第二列 | 第三列 || ------ | ------ | ------ || 第一行 | 1 | 张三 || 第二行 | 2 | 李四 || 第三行 | 3 | 王五 |### 水平线***### 链接this is [ an example](http://example.com/ &quot;Title&quot;) inline link.[ this link ](http://example.net/) has no title attribute.### URL网址&lt;www.google.com&gt;### 高亮必须先到设置中启用它。==高亮==### HTML您可以使用HTML来设置纯 Markdown 不支持的内容，例如， &lt;span style=&quot;color:red&quot;&gt;this text is red&lt;/span&gt; 用于添加红色文本。### 表情符号输入表情符号的语法是 :smile:","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2023-08-04T07:11:45.955Z","updated":"2023-08-05T12:00:09.347Z","comments":true,"path":"2023/08/04/hello-world/","link":"","permalink":"http://example.com/2023/08/04/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"项目管理","slug":"项目管理","permalink":"http://example.com/tags/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"},{"name":"技术债","slug":"技术债","permalink":"http://example.com/tags/%E6%8A%80%E6%9C%AF%E5%80%BA/"},{"name":"JVM","slug":"JVM","permalink":"http://example.com/tags/JVM/"},{"name":"工具","slug":"工具","permalink":"http://example.com/tags/%E5%B7%A5%E5%85%B7/"}]}